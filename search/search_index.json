{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hyper Protect Virtual Server Wildfire Workshop \u00b6 Welcome to our Hyper Protect Virtual Server workshop. Hyper Protect Virtual Server is IBM\u2019s open application environment that is uniquely engineered for trusted computing. This workshop provides a primer on Hyper Protect Virtual Server and practical use cases relevant to the enterprise. In addition, you will gain hands-on experience with IBM\u2019s unique secure image build process to build a secure image and deploy it inside a FIPS 197-compliant protected memory enclave. Next, you will learn about Hyper Protect Virtual Server\u2019s crypto service built on a FIPS 140-2 Level 4-compliant HSM. Lastly, you will gain hands-on experience exploiting the crypto service. Agenda \u00b6 Introduction to Hyper Protect Virtual Server Hyper Protect Use Cases & Demo Introduction to the Secure Image Build Process Lab: Build and Deploy Your First Hyper Protect Virtual Server Image Introduction to HSM-backed Crypto Service Lab: Crypto Service Exploitation Next Steps on Your Journey & Wrap Up Acknowledgements \u00b6 Thanks to the following contributors: Workshop owners \u00b6 Barry Silliman Garrett Woodworth Jin VanStee","title":"Home"},{"location":"#hyper-protect-virtual-server-wildfire-workshop","text":"Welcome to our Hyper Protect Virtual Server workshop. Hyper Protect Virtual Server is IBM\u2019s open application environment that is uniquely engineered for trusted computing. This workshop provides a primer on Hyper Protect Virtual Server and practical use cases relevant to the enterprise. In addition, you will gain hands-on experience with IBM\u2019s unique secure image build process to build a secure image and deploy it inside a FIPS 197-compliant protected memory enclave. Next, you will learn about Hyper Protect Virtual Server\u2019s crypto service built on a FIPS 140-2 Level 4-compliant HSM. Lastly, you will gain hands-on experience exploiting the crypto service.","title":"Hyper Protect Virtual Server Wildfire Workshop"},{"location":"#agenda","text":"Introduction to Hyper Protect Virtual Server Hyper Protect Use Cases & Demo Introduction to the Secure Image Build Process Lab: Build and Deploy Your First Hyper Protect Virtual Server Image Introduction to HSM-backed Crypto Service Lab: Crypto Service Exploitation Next Steps on Your Journey & Wrap Up","title":"Agenda"},{"location":"#acknowledgements","text":"Thanks to the following contributors:","title":"Acknowledgements"},{"location":"#workshop-owners","text":"Barry Silliman Garrett Woodworth Jin VanStee","title":"Workshop owners"},{"location":"glossary/","text":"This glossary of terms consolidates the terms for the Hyper Protect Virtual Server offering in alphabetical order to help both customers and internal team members to understand our offering better. Appliance \u00b6 IBM Secure Service Container based appliance provided by an Appliance Vendor. From Hosting Appliance perspective, it is the combination of IBM Secure Service Container and the Hyper Protect Virtual Server Hosting Appliance. Appliance Administrator \u00b6 The person administrating an appliance which includes tasks, such as configuring storage, or memory to the appliance or performing other configuration tasks through the API provided by SSC/the Hosting Appliance. Appliance Operational Data \u00b6 Metrics, logs, appliance dump data, error logs, stack traces, kernel dump, etc. Appliance Protected Data \u00b6 Appliance secrets, workload data, configuration data, settings, and other internal information stored by an appliance. Appliance Vendor \u00b6 An internal, or external exploiter of SSC, packaging SSC into an appliance. BYOK \u00b6 The abbreviation of Bring Your Own Key, which allows you to import your existing keys to Hyper Protect Crypto Services service instances that protect your keys with advanced encryption. BYOI \u00b6 The abbreviation of Bring Your Own Image, which is a part of IBM Hyper Protect Virtual Server solution to support the development and deployment of your own container images on top of the Secure Service Container framework. Container \u00b6 A runtime instance of an Open Container Image (OCI) image. Crypto administrator \u00b6 The person who signs commands that are issued to the crypto units. Multiple administrators can be added to one crypto unit to increase security. Crypto units \u00b6 A single unit that represents a hardware security module and the corresponding software stack that is dedicated to the hardware security module for cryptography. Data encryption keys \u00b6 A cryptographic key used to encrypt data that is stored in an application. Datapool \u00b6 Synonyms for Storage Pool. EP11 \u00b6 The abbreviation of Enterprise PKCS #11, which is specifically designed for customers seeking support for open standards and enhanced security. The EP11 library provides an interface very similar to the industry-standard PKCS #11 API. Envelope encryption \u00b6 The process of encrypting data with a data encryption key and then encrypting the key with a root key that can be fully managed. GPG \u00b6 The abbreviation of Gnu Privacy Guard, which is an open standard used for signing, encrypting, and decrypting texts with public and private keys to increase the security of communications. GREP11 \u00b6 Represents Enterprise PKCS #11 (EP11) APIs over gRPC calls, which is designed to be a stateless interface for cryptographic operations on cloud. gRPC \u00b6 A modern open source high performance remote procedure call (RPC) framework that can connect services in and across data centers for load balancing, tracing, health checking, and authentication. Hardware security module \u00b6 A physical appliance that provides on-demand encryption, key management, and key storage as a managed service. Hosting Appliance \u00b6 A technical component within IBM Secure Service Container based appliances, providing the enablement for running Docker-based workloads. Image \u00b6 The basis of the containers. An image is an ordered collection of root file system changes and the corresponding execution parameters for use within a container runtime. ISV \u00b6 The abbreviation of Independent Software Vendor, who provides software solutions by developing and deploying containerized applications to the Secure Service Container partitions. Master key \u00b6 An encryption key that is used to protect a crypto unit. The master key provides full control of the hardware security module and ownership of the root of trust that encrypts the chain keys, including the root key and standard key. Management Utilities \u00b6 A set of applications to provide an alternate way of configuring Hyper Protect Crypto Services service instances using signature keys and master key parts stored on smart cards. Management server \u00b6 An x86 or s390x Linux management server used to run the commands provided by the Hyper Protect Virtual Servers offering, and administer the offering. Manifest \u00b6 A manifest is generated by the Secure Build for audit purpose, which contains a copy of the github project cloned by the Secure Build container, a copy of the build log, and a build.json with the build status. Manifest public key \u00b6 A manifest public key is used to verify the manifest generated by the Secure Build. Manifest private key \u00b6 A manifest private key is used to sign the manifest during the Secure Build. Namespace \u00b6 A namespace such as ibmzcontainers that contains a number of unique images. For examples, the images include hpvsop-base, hyperpcons-worker, hyperpcons-riaas, and so on. Partition \u00b6 A partition is the logic partition (LPAR) on the mainframe, and can be created by using the logic partitioning tools such as Hardware Management Console (HMC) or other logical partitioning tools. PKCS #11 \u00b6 The abbreviation of Public-Key Cryptography Standards #11, which defines a platform-independent API to cryptographic tokens, such as HSM and smart cards. Quotagroup \u00b6 The storage assigned to a workload running on an appliance. The appliance administrator assigns FCP, or ECKD based storage to an appliance. He then creates quotagroups, representing parts of the underlying storage. He finally assigns quotagroups to workloads through the appliance API. Root keys \u00b6 A symmetric wrapping key that is used for encrypting and decrypting other keys that are stored in a data service. Registry \u00b6 A Registry is a hosted service containing repositories of container images that responds to the Registry API. For example, Docker Hub. Repository \u00b6 A repository is a set of containerized images. A repository can be shared by pushing it to a registry server. Different images in the repository can be labeled using tags. For example, hpvsop-base. Repository definition files \u00b6 An encrypted registration file or a repository definition file is used to register the repository, for authentication or validation reasons, such that a Hosting Appliance will trust that the image, when pulled from the registry, is authentic. Repository registration files \u00b6 A cleartext Python or JSON format file, which is generated by the Secure Build container when the container is created. The JSON format repository registration file can be used as the direct input to generate an encrypted repository definition file. Secondary node \u00b6 A cluster member that replicates the contents of the primary database in Hyper Protect DBaaS. Smart cards \u00b6 An HSM that looks like a credit card with an embedded chip. The chip is capable of performing a limited set of cryptographic operations and is loaded with custom software. Smart card readers \u00b6 A device that attaches to a workstation and allows the workstation to communicate with a smart card. Smart Card Utility Program \u00b6 The application installed as part of the Management Utilities. It sets up and manages the smart cards used by the Trusted Key Entry (TKE) application. Signature key \u00b6 An encryption key that is used by the crypto unit administrator to sign commands that are issued to the crypto unit. Standard key \u00b6 Another resources in Hyper Protect Crypto Services to directly encrypt and decrypt data. runc \u00b6 A CLI tool for spawning and running containers according to the Open Container Initiative (OCI) specification. runq \u00b6 An open-sourced hypervisor-based Docker runtime environment, which is based on runc to run regular containerized images in a lightweight KVM or Qemu virtual machine. s390x \u00b6 The underlying architecture of IBM Z or LinuxONE mainframe. Secure Build \u00b6 The process of building the application code from a Git-like source repository into a container image for s390x architecture, signing the image by using the authentication keys, and publishing the image to the remote repository for later integration. Secure Service Container \u00b6 A container framework based on the runq technology, that is supported by the IBM Z or LinuxONE servers. Secure Service Container partition \u00b6 A type of logic partitions (LPARs) on the mainframe that runs the Secure Service Container framework. SSH \u00b6 The abbreviation of Secure Shell, which is a cryptographic network protocol for operating network services securely over an unsecured network by using public and private keys. Storage Pool \u00b6 A storage pool is a uniquely named collection of storage disks on which the appliance file system is mounted. System Administrator \u00b6 This role includes the system administrator of a machine, storage administrators, and network administrators. tag \u00b6 A tag is used to version images in a repository. For example, latest, 1.2.3.4-develop-a0d3aea, or s390x-develop-54a9045. Trusted Key Entry application \u00b6 The application installed as part of the Management Utilities. It uses smart cards to load master keys in service instances and to perform other configuration tasks for service instances. Workload \u00b6 The application and data provided and generated by a (running) Workload Image. Workload Data \u00b6 Workload user or workload client data, workload logs, workload secrets stored in the appliance. Workload Image \u00b6 A container-based image, provided by the Workload Vendor. An appliance only runs workload images which have been registered with the appliance through a repository definition file. Workload User \u00b6 The end-user of a workload. Workload Vendor \u00b6 The creator of a Docker image running on top of Hosting Appliance.","title":"Glossary of terms"},{"location":"glossary/#appliance","text":"IBM Secure Service Container based appliance provided by an Appliance Vendor. From Hosting Appliance perspective, it is the combination of IBM Secure Service Container and the Hyper Protect Virtual Server Hosting Appliance.","title":"Appliance"},{"location":"glossary/#appliance-administrator","text":"The person administrating an appliance which includes tasks, such as configuring storage, or memory to the appliance or performing other configuration tasks through the API provided by SSC/the Hosting Appliance.","title":"Appliance Administrator"},{"location":"glossary/#appliance-operational-data","text":"Metrics, logs, appliance dump data, error logs, stack traces, kernel dump, etc.","title":"Appliance Operational Data"},{"location":"glossary/#appliance-protected-data","text":"Appliance secrets, workload data, configuration data, settings, and other internal information stored by an appliance.","title":"Appliance Protected Data"},{"location":"glossary/#appliance-vendor","text":"An internal, or external exploiter of SSC, packaging SSC into an appliance.","title":"Appliance Vendor"},{"location":"glossary/#byok","text":"The abbreviation of Bring Your Own Key, which allows you to import your existing keys to Hyper Protect Crypto Services service instances that protect your keys with advanced encryption.","title":"BYOK"},{"location":"glossary/#byoi","text":"The abbreviation of Bring Your Own Image, which is a part of IBM Hyper Protect Virtual Server solution to support the development and deployment of your own container images on top of the Secure Service Container framework.","title":"BYOI"},{"location":"glossary/#container","text":"A runtime instance of an Open Container Image (OCI) image.","title":"Container"},{"location":"glossary/#crypto-administrator","text":"The person who signs commands that are issued to the crypto units. Multiple administrators can be added to one crypto unit to increase security.","title":"Crypto administrator"},{"location":"glossary/#crypto-units","text":"A single unit that represents a hardware security module and the corresponding software stack that is dedicated to the hardware security module for cryptography.","title":"Crypto units"},{"location":"glossary/#data-encryption-keys","text":"A cryptographic key used to encrypt data that is stored in an application.","title":"Data encryption keys"},{"location":"glossary/#datapool","text":"Synonyms for Storage Pool.","title":"Datapool"},{"location":"glossary/#ep11","text":"The abbreviation of Enterprise PKCS #11, which is specifically designed for customers seeking support for open standards and enhanced security. The EP11 library provides an interface very similar to the industry-standard PKCS #11 API.","title":"EP11"},{"location":"glossary/#envelope-encryption","text":"The process of encrypting data with a data encryption key and then encrypting the key with a root key that can be fully managed.","title":"Envelope encryption"},{"location":"glossary/#gpg","text":"The abbreviation of Gnu Privacy Guard, which is an open standard used for signing, encrypting, and decrypting texts with public and private keys to increase the security of communications.","title":"GPG"},{"location":"glossary/#grep11","text":"Represents Enterprise PKCS #11 (EP11) APIs over gRPC calls, which is designed to be a stateless interface for cryptographic operations on cloud.","title":"GREP11"},{"location":"glossary/#grpc","text":"A modern open source high performance remote procedure call (RPC) framework that can connect services in and across data centers for load balancing, tracing, health checking, and authentication.","title":"gRPC"},{"location":"glossary/#hardware-security-module","text":"A physical appliance that provides on-demand encryption, key management, and key storage as a managed service.","title":"Hardware security module"},{"location":"glossary/#hosting-appliance","text":"A technical component within IBM Secure Service Container based appliances, providing the enablement for running Docker-based workloads.","title":"Hosting Appliance"},{"location":"glossary/#image","text":"The basis of the containers. An image is an ordered collection of root file system changes and the corresponding execution parameters for use within a container runtime.","title":"Image"},{"location":"glossary/#isv","text":"The abbreviation of Independent Software Vendor, who provides software solutions by developing and deploying containerized applications to the Secure Service Container partitions.","title":"ISV"},{"location":"glossary/#master-key","text":"An encryption key that is used to protect a crypto unit. The master key provides full control of the hardware security module and ownership of the root of trust that encrypts the chain keys, including the root key and standard key.","title":"Master key"},{"location":"glossary/#management-utilities","text":"A set of applications to provide an alternate way of configuring Hyper Protect Crypto Services service instances using signature keys and master key parts stored on smart cards.","title":"Management Utilities"},{"location":"glossary/#management-server","text":"An x86 or s390x Linux management server used to run the commands provided by the Hyper Protect Virtual Servers offering, and administer the offering.","title":"Management server"},{"location":"glossary/#manifest","text":"A manifest is generated by the Secure Build for audit purpose, which contains a copy of the github project cloned by the Secure Build container, a copy of the build log, and a build.json with the build status.","title":"Manifest"},{"location":"glossary/#manifest-public-key","text":"A manifest public key is used to verify the manifest generated by the Secure Build.","title":"Manifest public key"},{"location":"glossary/#manifest-private-key","text":"A manifest private key is used to sign the manifest during the Secure Build.","title":"Manifest private key"},{"location":"glossary/#namespace","text":"A namespace such as ibmzcontainers that contains a number of unique images. For examples, the images include hpvsop-base, hyperpcons-worker, hyperpcons-riaas, and so on.","title":"Namespace"},{"location":"glossary/#partition","text":"A partition is the logic partition (LPAR) on the mainframe, and can be created by using the logic partitioning tools such as Hardware Management Console (HMC) or other logical partitioning tools.","title":"Partition"},{"location":"glossary/#pkcs-11","text":"The abbreviation of Public-Key Cryptography Standards #11, which defines a platform-independent API to cryptographic tokens, such as HSM and smart cards.","title":"PKCS #11"},{"location":"glossary/#quotagroup","text":"The storage assigned to a workload running on an appliance. The appliance administrator assigns FCP, or ECKD based storage to an appliance. He then creates quotagroups, representing parts of the underlying storage. He finally assigns quotagroups to workloads through the appliance API.","title":"Quotagroup"},{"location":"glossary/#root-keys","text":"A symmetric wrapping key that is used for encrypting and decrypting other keys that are stored in a data service.","title":"Root keys"},{"location":"glossary/#registry","text":"A Registry is a hosted service containing repositories of container images that responds to the Registry API. For example, Docker Hub.","title":"Registry"},{"location":"glossary/#repository","text":"A repository is a set of containerized images. A repository can be shared by pushing it to a registry server. Different images in the repository can be labeled using tags. For example, hpvsop-base.","title":"Repository"},{"location":"glossary/#repository-definition-files","text":"An encrypted registration file or a repository definition file is used to register the repository, for authentication or validation reasons, such that a Hosting Appliance will trust that the image, when pulled from the registry, is authentic.","title":"Repository definition files"},{"location":"glossary/#repository-registration-files","text":"A cleartext Python or JSON format file, which is generated by the Secure Build container when the container is created. The JSON format repository registration file can be used as the direct input to generate an encrypted repository definition file.","title":"Repository registration files"},{"location":"glossary/#secondary-node","text":"A cluster member that replicates the contents of the primary database in Hyper Protect DBaaS.","title":"Secondary node"},{"location":"glossary/#smart-cards","text":"An HSM that looks like a credit card with an embedded chip. The chip is capable of performing a limited set of cryptographic operations and is loaded with custom software.","title":"Smart cards"},{"location":"glossary/#smart-card-readers","text":"A device that attaches to a workstation and allows the workstation to communicate with a smart card.","title":"Smart card readers"},{"location":"glossary/#smart-card-utility-program","text":"The application installed as part of the Management Utilities. It sets up and manages the smart cards used by the Trusted Key Entry (TKE) application.","title":"Smart Card Utility Program"},{"location":"glossary/#signature-key","text":"An encryption key that is used by the crypto unit administrator to sign commands that are issued to the crypto unit.","title":"Signature key"},{"location":"glossary/#standard-key","text":"Another resources in Hyper Protect Crypto Services to directly encrypt and decrypt data.","title":"Standard key"},{"location":"glossary/#runc","text":"A CLI tool for spawning and running containers according to the Open Container Initiative (OCI) specification.","title":"runc"},{"location":"glossary/#runq","text":"An open-sourced hypervisor-based Docker runtime environment, which is based on runc to run regular containerized images in a lightweight KVM or Qemu virtual machine.","title":"runq"},{"location":"glossary/#s390x","text":"The underlying architecture of IBM Z or LinuxONE mainframe.","title":"s390x"},{"location":"glossary/#secure-build","text":"The process of building the application code from a Git-like source repository into a container image for s390x architecture, signing the image by using the authentication keys, and publishing the image to the remote repository for later integration.","title":"Secure Build"},{"location":"glossary/#secure-service-container","text":"A container framework based on the runq technology, that is supported by the IBM Z or LinuxONE servers.","title":"Secure Service Container"},{"location":"glossary/#secure-service-container-partition","text":"A type of logic partitions (LPARs) on the mainframe that runs the Secure Service Container framework.","title":"Secure Service Container partition"},{"location":"glossary/#ssh","text":"The abbreviation of Secure Shell, which is a cryptographic network protocol for operating network services securely over an unsecured network by using public and private keys.","title":"SSH"},{"location":"glossary/#storage-pool","text":"A storage pool is a uniquely named collection of storage disks on which the appliance file system is mounted.","title":"Storage Pool"},{"location":"glossary/#system-administrator","text":"This role includes the system administrator of a machine, storage administrators, and network administrators.","title":"System Administrator"},{"location":"glossary/#tag","text":"A tag is used to version images in a repository. For example, latest, 1.2.3.4-develop-a0d3aea, or s390x-develop-54a9045.","title":"tag"},{"location":"glossary/#trusted-key-entry-application","text":"The application installed as part of the Management Utilities. It uses smart cards to load master keys in service instances and to perform other configuration tasks for service instances.","title":"Trusted Key Entry application"},{"location":"glossary/#workload","text":"The application and data provided and generated by a (running) Workload Image.","title":"Workload"},{"location":"glossary/#workload-data","text":"Workload user or workload client data, workload logs, workload secrets stored in the appliance.","title":"Workload Data"},{"location":"glossary/#workload-image","text":"A container-based image, provided by the Workload Vendor. An appliance only runs workload images which have been registered with the appliance through a repository definition file.","title":"Workload Image"},{"location":"glossary/#workload-user","text":"The end-user of a workload.","title":"Workload User"},{"location":"glossary/#workload-vendor","text":"The creator of a Docker image running on top of Hosting Appliance.","title":"Workload Vendor"},{"location":"prerequisites/","text":"Prerequisites \u00b6 Create a GitHub \u00b6 Create a GitHub account (if you don't already have one) here . Create a Docker Hub \u00b6 Create a Docker Hub account (if you don't already have one) following the instructions here . Create a Docker access Token \u00b6 Create an access token for Docker Hub access during the lab (you will delete it if after finishing the lab) following the instructions here .","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"","title":"Prerequisites"},{"location":"prerequisites/#create-a-github","text":"Create a GitHub account (if you don't already have one) here .","title":"Create a GitHub"},{"location":"prerequisites/#create-a-docker-hub","text":"Create a Docker Hub account (if you don't already have one) following the instructions here .","title":"Create a Docker Hub"},{"location":"prerequisites/#create-a-docker-access-token","text":"Create an access token for Docker Hub access during the lab (you will delete it if after finishing the lab) following the instructions here .","title":"Create a Docker access Token"},{"location":"proposechange/","text":"How to propose a change \u00b6 On the page you want to make a change to, click on the pencil icon next to the page's title. This will take you to edit the page in Github. You will see a message similar to the following: \"You\u2019re editing a file in a project you don\u2019t have write access to. Submitting a change to this file will write it to a new branch in your fork, so you can send a pull request.\" Make your changes in Markdown. And submit for review. The owners of this repo will review your pull request and accept or deny your change proposal. There are other ways of doing a pull request, a Google search will lead you to those tutorials.","title":"Propose a change"},{"location":"proposechange/#how-to-propose-a-change","text":"On the page you want to make a change to, click on the pencil icon next to the page's title. This will take you to edit the page in Github. You will see a message similar to the following: \"You\u2019re editing a file in a project you don\u2019t have write access to. Submitting a change to this file will write it to a new branch in your fork, so you can send a pull request.\" Make your changes in Markdown. And submit for review. The owners of this repo will review your pull request and accept or deny your change proposal. There are other ways of doing a pull request, a Google search will lead you to those tutorials.","title":"How to propose a change"},{"location":"resources/","text":"Other Resources \u00b6","title":"Other resources"},{"location":"resources/#other-resources","text":"","title":"Other Resources"},{"location":"securebuild-lab/assignment/","text":"","title":"Assignment"},{"location":"securebuild-lab/bitcoin_wallet/","text":"Use your bitcoin wallet application \u00b6 Overview \u00b6 This application is an electrum bitcoin wallet. You can use it to store bitcoin. Whereas this version of the wallet is just a proof of concept the idea is that digital assets benefit from the security of Hyper Protect and so Seed your wallet \u00b6 Get currency from a bitcoin test faucet \u00b6 Send current back to the faucet \u00b6","title":"Use your Bitcoin Wallet"},{"location":"securebuild-lab/bitcoin_wallet/#use-your-bitcoin-wallet-application","text":"","title":"Use your bitcoin wallet application"},{"location":"securebuild-lab/bitcoin_wallet/#overview","text":"This application is an electrum bitcoin wallet. You can use it to store bitcoin. Whereas this version of the wallet is just a proof of concept the idea is that digital assets benefit from the security of Hyper Protect and so","title":"Overview"},{"location":"securebuild-lab/bitcoin_wallet/#seed-your-wallet","text":"","title":"Seed your wallet"},{"location":"securebuild-lab/bitcoin_wallet/#get-currency-from-a-bitcoin-test-faucet","text":"","title":"Get currency from a bitcoin test faucet"},{"location":"securebuild-lab/bitcoin_wallet/#send-current-back-to-the-faucet","text":"","title":"Send current back to the faucet"},{"location":"securebuild-lab/build/","text":"Securely Build your Application \u00b6 Export Variables set in previous sections to current terminal session \u00b6 Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\" Create Trust GPG signing key for your Docker Repository \u00b6 Set key name Command Syntax export keyName = \"your_keyname\" Example Command export keyName = \"secure_bitcoin_key\" Set key passphrase Command Syntax export passphrase = \"your_passphrase\" Example Command export passphrase = \"most_secure_pw_i_could_think_of\" Create directory to store Docker Content Trust repository signing key material mkdir -p \" ${ SB_DIR } /dctrust_keys\" Create Key Definition cat > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } _definition_keys\" <<EOF %echo Generating registration definition key Key-Type: RSA Key-Length: 4096 Subkey-Type: RSA Subkey-Length: 4096 Name-Real: ${keyName} Expire-Date: 0 Passphrase: ${passphrase} # Do a commit here, so that we can later print \"done\" :-) %commit %echo done EOF Generate Key pair gpg --armor --batch --generate-key \" ${ SB_DIR } /dctrust_keys/ ${ keyName } _definition_keys\" Example Output Export Private key gpg --armor --pinentry-mode = loopback --passphrase \" ${ passphrase } \" \\ --export-secret-keys \" ${ keyName } \" > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } .private\" Example Output Export Public key gpg --armor --export ${ keyName } > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } .pub\" Example Ouput List newly geneerated key files ls ${ SB_DIR } /dctrust_keys/ Example Output Set Build Configuration \u00b6 Set Secure Build Server IP ADDRESS export SB_IP = 192 .168.22.79 Set Secure Build Server Port export SB_PORT = 213 ${ HPVS_NUMBER } Set Secure Build GitHub repository export GH_REPO = \"https://github.com/IBM/secure-bitcoin-wallet.git\" Set Docker Image Name export IMAGE_NAME = \"hpvs_bc\" Set repository registration name export REPO_ID = \" ${ REGISTRY_NAME } - ${ HPVS_NUMBER } \" Save repository registration name for later use echo \"export REPO_ID=' ${ REPO_ID } '\" >> \" ${ HOME } /.bashrc\" Create config file cat > \"${SB_DIR}/sb_config.yaml\" <<EOF secure_build_workers: sbs: url: 'https://${SB_IP}' port: '${SB_PORT}' cert_path: '${SB_DIR}/sbs_keys/sbs.cert' key_path: '${SB_DIR}/sbs_keys/sbs.key' regfile: id: '${REPO_ID}' github: url: '${GH_REPO}' branch: 'master' recurse_submodules: 'False' dockerfile_path: './Dockerfile' docker_build_path: './' docker: push_server: '${REGISTRY_NAME}' #base_server: '${REGISTRY_NAME}' pull_server: '${REGISTRY_NAME}' repo: '${DOCKER_USERNAME}/${IMAGE_NAME}' image_tag_prefix: 'latest' content_trust_base: 'False' env: whitelist: [] build: args: [] signing_key: private_key_path: '${SB_DIR}/dctrust_keys/${keyName}.private' public_key_path: '${SB_DIR}/dctrust_keys/${keyName}.pub' EOF Build Application \u00b6 Launch secure build with a timeout of 15 minutes (900 seconds) to complete using the above generated configuration file. hpvs sb init --config \" ${ SB_DIR } /sb_config.yaml\" --out \" ${ SB_DIR } /yaml. ${ REPO_ID } .enc\" --timeout 900 --build You can look at the logs if desired in another terminal window while the secure build is running (don't intterrupt the current terminal window which is waiting for the secure build) hpvs sb log --config \" ${ SB_DIR } /sb_config.yaml\" You can also look at the secure build status in another window. This is useful if you accidentally interrupted the secure build command or if it times out due to the timeout not being long enough. hpvs sb status --config \" ${ SB_DIR } /sb_config.yaml\" When the seecure build completes successfully it will have the following status Example Output Verify your application \u00b6 Get your application manifest Verify you application manifest What does this give me? This gives you awesomeness .... Summary \u00b6 Congratulations!!! You have securely built your application and are now ready to deploy it into a Hyper Protect Virtual Server in the next section.","title":"Securely Build your Image"},{"location":"securebuild-lab/build/#securely-build-your-application","text":"","title":"Securely Build your Application"},{"location":"securebuild-lab/build/#export-variables-set-in-previous-sections-to-current-terminal-session","text":"Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\"","title":"Export Variables set in previous sections to current terminal session"},{"location":"securebuild-lab/build/#create-trust-gpg-signing-key-for-your-docker-repository","text":"Set key name Command Syntax export keyName = \"your_keyname\" Example Command export keyName = \"secure_bitcoin_key\" Set key passphrase Command Syntax export passphrase = \"your_passphrase\" Example Command export passphrase = \"most_secure_pw_i_could_think_of\" Create directory to store Docker Content Trust repository signing key material mkdir -p \" ${ SB_DIR } /dctrust_keys\" Create Key Definition cat > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } _definition_keys\" <<EOF %echo Generating registration definition key Key-Type: RSA Key-Length: 4096 Subkey-Type: RSA Subkey-Length: 4096 Name-Real: ${keyName} Expire-Date: 0 Passphrase: ${passphrase} # Do a commit here, so that we can later print \"done\" :-) %commit %echo done EOF Generate Key pair gpg --armor --batch --generate-key \" ${ SB_DIR } /dctrust_keys/ ${ keyName } _definition_keys\" Example Output Export Private key gpg --armor --pinentry-mode = loopback --passphrase \" ${ passphrase } \" \\ --export-secret-keys \" ${ keyName } \" > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } .private\" Example Output Export Public key gpg --armor --export ${ keyName } > \" ${ SB_DIR } /dctrust_keys/ ${ keyName } .pub\" Example Ouput List newly geneerated key files ls ${ SB_DIR } /dctrust_keys/ Example Output","title":"Create Trust GPG signing key for your Docker Repository"},{"location":"securebuild-lab/build/#set-build-configuration","text":"Set Secure Build Server IP ADDRESS export SB_IP = 192 .168.22.79 Set Secure Build Server Port export SB_PORT = 213 ${ HPVS_NUMBER } Set Secure Build GitHub repository export GH_REPO = \"https://github.com/IBM/secure-bitcoin-wallet.git\" Set Docker Image Name export IMAGE_NAME = \"hpvs_bc\" Set repository registration name export REPO_ID = \" ${ REGISTRY_NAME } - ${ HPVS_NUMBER } \" Save repository registration name for later use echo \"export REPO_ID=' ${ REPO_ID } '\" >> \" ${ HOME } /.bashrc\" Create config file cat > \"${SB_DIR}/sb_config.yaml\" <<EOF secure_build_workers: sbs: url: 'https://${SB_IP}' port: '${SB_PORT}' cert_path: '${SB_DIR}/sbs_keys/sbs.cert' key_path: '${SB_DIR}/sbs_keys/sbs.key' regfile: id: '${REPO_ID}' github: url: '${GH_REPO}' branch: 'master' recurse_submodules: 'False' dockerfile_path: './Dockerfile' docker_build_path: './' docker: push_server: '${REGISTRY_NAME}' #base_server: '${REGISTRY_NAME}' pull_server: '${REGISTRY_NAME}' repo: '${DOCKER_USERNAME}/${IMAGE_NAME}' image_tag_prefix: 'latest' content_trust_base: 'False' env: whitelist: [] build: args: [] signing_key: private_key_path: '${SB_DIR}/dctrust_keys/${keyName}.private' public_key_path: '${SB_DIR}/dctrust_keys/${keyName}.pub' EOF","title":"Set Build Configuration"},{"location":"securebuild-lab/build/#build-application","text":"Launch secure build with a timeout of 15 minutes (900 seconds) to complete using the above generated configuration file. hpvs sb init --config \" ${ SB_DIR } /sb_config.yaml\" --out \" ${ SB_DIR } /yaml. ${ REPO_ID } .enc\" --timeout 900 --build You can look at the logs if desired in another terminal window while the secure build is running (don't intterrupt the current terminal window which is waiting for the secure build) hpvs sb log --config \" ${ SB_DIR } /sb_config.yaml\" You can also look at the secure build status in another window. This is useful if you accidentally interrupted the secure build command or if it times out due to the timeout not being long enough. hpvs sb status --config \" ${ SB_DIR } /sb_config.yaml\" When the seecure build completes successfully it will have the following status Example Output","title":"Build Application"},{"location":"securebuild-lab/build/#verify-your-application","text":"Get your application manifest Verify you application manifest What does this give me? This gives you awesomeness ....","title":"Verify your application"},{"location":"securebuild-lab/build/#summary","text":"Congratulations!!! You have securely built your application and are now ready to deploy it into a Hyper Protect Virtual Server in the next section.","title":"Summary"},{"location":"securebuild-lab/cleanup/","text":"Clean up Instructions \u00b6 Export Variables set in previous sections to current terminal session \u00b6 Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\" Cleanup Secure Build Server \u00b6 Cleanup virtual server hpvs vs delete --name sbserver- ${ HPVS_NUMBER } Cleanup quotagroup hpvs quotagroup delete --name \"sb-user ${ HPVS_NUMBER } \" Cleanup Application \u00b6 Cleanup HPVS deployment hpvs vs delete --name ${ REPO_ID } Cleanup quotagroup hpvs quotagroup delete --name \" ${ REPO_ID } \" Cleanup Repository \u00b6 hpvs repository delete --id ${ REPO_ID } Example Output","title":"Clean up your Environment"},{"location":"securebuild-lab/cleanup/#clean-up-instructions","text":"","title":"Clean up Instructions"},{"location":"securebuild-lab/cleanup/#export-variables-set-in-previous-sections-to-current-terminal-session","text":"Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\"","title":"Export Variables set in previous sections to current terminal session"},{"location":"securebuild-lab/cleanup/#cleanup-secure-build-server","text":"Cleanup virtual server hpvs vs delete --name sbserver- ${ HPVS_NUMBER } Cleanup quotagroup hpvs quotagroup delete --name \"sb-user ${ HPVS_NUMBER } \"","title":"Cleanup Secure Build Server"},{"location":"securebuild-lab/cleanup/#cleanup-application","text":"Cleanup HPVS deployment hpvs vs delete --name ${ REPO_ID } Cleanup quotagroup hpvs quotagroup delete --name \" ${ REPO_ID } \"","title":"Cleanup Application"},{"location":"securebuild-lab/cleanup/#cleanup-repository","text":"hpvs repository delete --id ${ REPO_ID } Example Output","title":"Cleanup Repository"},{"location":"securebuild-lab/create-server/","text":"Create Secure Build Hyper Protect Virtual Server \u00b6 Export Variables set in previous sections to current terminal session \u00b6 Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\" Create directory for secure build lab and change directory \u00b6 Set your secure build directory export SB_DIR = \" $HOME /securebuild-lab\" Save SB_DIR to $HOME/.bashrc for future shells (in case you open new terminals) echo \"export SB_DIR=' ${ SB_DIR } '\" >> \" ${ HOME } /.bashrc\" Make SB_DIR/sbs_keys directory to store secure build server keys. mkdir -p \" ${ SB_DIR } /sbs_keys\" Create Certificate and Key for mutual tls \u00b6 Generate rand file openssl rand -out \" ${ HOME } /.rnd\" -hex 256 2. Generate cert and key to use mutual tls openssl req -newkey rsa:2048 \\ -new -nodes -x509 \\ -days 3650 \\ -out \" ${ SB_DIR } /sbs_keys/sbs.cert\" \\ -keyout \" ${ SB_DIR } /sbs_keys/sbs.key\" \\ -subj \"/C=US/O=IBM/CN=hpvs.example.com\" Example Output Generating a RSA private key .......................................................+++++ .......................+++++ writing new private key to '/home/multiarch-lab/securebuild-lab/sbs.key' ----- Save the cert as an environment variable export cert = $( echo $( cat \" ${ SB_DIR } /sbs_keys/sbs.cert\" | base64 ) | tr -d ' ' ) Set your provided number and save it for later use \u00b6 You will be assigned a number for the lab so as not to interfere with other users. Note This table tells you which number you are assigned. Set the HPVS_NUMBER variable with your assigned 2 digit number Command Syntax export HPVS_NUMBER = \"your_assigned_number\" Example Command export HPVS_NUMBER = \"00\" Warning Your user will NOT be 00. Please set the appropriate user you have been assigned. Save your number to bashrc for later use. echo \"export HPVS_NUMBER=' ${ HPVS_NUMBER } '\" >> \" ${ HOME } /.bashrc\" Create Quota Group with storage for secure build server \u00b6 hpvs quotagroup create --name \"sb-user ${ HPVS_NUMBER } \" --size = 29GB Example Ouput +-------------+--------------+ | name | sb-user00 | | filesystem | btrfs | | passthrough | false | | pool_id | lv_data_pool | | size | 29GB | | available | 29GB | | containers | [] | +-------------+--------------+ Create Securebuild server \u00b6 hpvs vs create --name sbserver- ${ HPVS_NUMBER } --repo SecureDockerBuild \\ --tag 1 .2.1-release-9b63b43 --cpu 2 --ram 2048 \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = new, mount = /newroot, filesystem = ext4, size = 10GB}\" \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = data, mount = /data, filesystem = ext4, size = 2GB}\" \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = docker, mount = /docker, filesystem = ext4, size = 16GB}\" \\ --env ={ EX_VOLUMES = \"/docker,/data\" ,ROOTFS_LOCK = y,CLIENT_CRT = $cert } \\ --ports \"{containerport = 443, protocol = tcp, hostport = 213 ${ HPVS_NUMBER } }\" Example Output \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 PROPERTIES \u2502 VALUES \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Name \u2502 sbserver-00 \u2502 \u2502 Status \u2502 Up Less than a second \u2502 \u2502 CPU \u2502 2 \u2502 \u2502 Memory \u2502 2048 \u2502 \u2502 Networks \u2502 Network:bridge \u2502 \u2502 \u2502 IPAddress:172.31.0.7 \u2502 \u2502 \u2502 Gateway:172.31.0.1 \u2502 \u2502 \u2502 Subnet:16 \u2502 \u2502 \u2502 MacAddress:02:42:ac:1f:00:07 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Ports \u2502 LocalPort:443/tcp \u2502 \u2502 \u2502 GuestPort:21300 \u2502 \u2502 \u2502 \u2502 \u2502 Quotagroups \u2502 appliance_data \u2502 \u2502 \u2502 sb-user00 \u2502 \u2502 \u2502 \u2502 \u2502 State \u2502 running \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f We can see the quotagroup is now being used with hpvs quotagroup show --name \"sb-user ${ HPVS_NUMBER } \" Example Output +-------------+--------------------------------+ | PROPERTIES | VALUES | +-------------+--------------------------------+ | name | sb-user00 | | filesystem | btrfs | | passthrough | false | | pool_id | lv_data_pool | | size | 29GB | | available | 701MB | | containers | Mountids: \"new\" , \"data\" , \"docker\" | | | | | | Container:sbserver-00 | | | | +-------------+--------------------------------+ The show output for the Hyper Protect Virtual Server was shown when it was deployed but when can bring it back up with hpvs vs show --name \"sbserver- ${ HPVS_NUMBER } \" Example Output \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 PROPERTIES \u2502 VALUES \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Name \u2502 sbserver-00 \u2502 \u2502 Status \u2502 Up 3 minutes \u2502 \u2502 CPU \u2502 2 \u2502 \u2502 Memory \u2502 2048 \u2502 \u2502 Networks \u2502 Network:bridge \u2502 \u2502 \u2502 IPAddress:172.31.0.7 \u2502 \u2502 \u2502 Gateway:172.31.0.1 \u2502 \u2502 \u2502 Subnet:16 \u2502 \u2502 \u2502 MacAddress:02:42:ac:1f:00:07 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Ports \u2502 LocalPort:443/tcp \u2502 \u2502 \u2502 GuestPort:21300 \u2502 \u2502 \u2502 \u2502 \u2502 Quotagroups \u2502 appliance_data \u2502 \u2502 \u2502 sb-user00 \u2502 \u2502 \u2502 \u2502 \u2502 State \u2502 running \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Your secure build server is now up and running! It is available at the IP Address of the Hyper Protect Virtual Server LPAR and port (GuestPort) specified (In this case https://192.168.22.79:21300 ) You will use this secure build server to securely build your application in the next section. Note You can assign IP addresses and hostnames for containers as necessary for your purposes but using the docker network and host ports is a nice way to quickly get running without having to use up IP addresses on your network.","title":"Create your Secure Build server"},{"location":"securebuild-lab/create-server/#create-secure-build-hyper-protect-virtual-server","text":"","title":"Create Secure Build Hyper Protect Virtual Server"},{"location":"securebuild-lab/create-server/#export-variables-set-in-previous-sections-to-current-terminal-session","text":"Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\"","title":"Export Variables set in previous sections to current terminal session"},{"location":"securebuild-lab/create-server/#create-directory-for-secure-build-lab-and-change-directory","text":"Set your secure build directory export SB_DIR = \" $HOME /securebuild-lab\" Save SB_DIR to $HOME/.bashrc for future shells (in case you open new terminals) echo \"export SB_DIR=' ${ SB_DIR } '\" >> \" ${ HOME } /.bashrc\" Make SB_DIR/sbs_keys directory to store secure build server keys. mkdir -p \" ${ SB_DIR } /sbs_keys\"","title":"Create directory for secure build lab and change directory"},{"location":"securebuild-lab/create-server/#create-certificate-and-key-for-mutual-tls","text":"Generate rand file openssl rand -out \" ${ HOME } /.rnd\" -hex 256 2. Generate cert and key to use mutual tls openssl req -newkey rsa:2048 \\ -new -nodes -x509 \\ -days 3650 \\ -out \" ${ SB_DIR } /sbs_keys/sbs.cert\" \\ -keyout \" ${ SB_DIR } /sbs_keys/sbs.key\" \\ -subj \"/C=US/O=IBM/CN=hpvs.example.com\" Example Output Generating a RSA private key .......................................................+++++ .......................+++++ writing new private key to '/home/multiarch-lab/securebuild-lab/sbs.key' ----- Save the cert as an environment variable export cert = $( echo $( cat \" ${ SB_DIR } /sbs_keys/sbs.cert\" | base64 ) | tr -d ' ' )","title":"Create Certificate and Key for mutual tls"},{"location":"securebuild-lab/create-server/#set-your-provided-number-and-save-it-for-later-use","text":"You will be assigned a number for the lab so as not to interfere with other users. Note This table tells you which number you are assigned. Set the HPVS_NUMBER variable with your assigned 2 digit number Command Syntax export HPVS_NUMBER = \"your_assigned_number\" Example Command export HPVS_NUMBER = \"00\" Warning Your user will NOT be 00. Please set the appropriate user you have been assigned. Save your number to bashrc for later use. echo \"export HPVS_NUMBER=' ${ HPVS_NUMBER } '\" >> \" ${ HOME } /.bashrc\"","title":"Set your provided number and save it for later use"},{"location":"securebuild-lab/create-server/#create-quota-group-with-storage-for-secure-build-server","text":"hpvs quotagroup create --name \"sb-user ${ HPVS_NUMBER } \" --size = 29GB Example Ouput +-------------+--------------+ | name | sb-user00 | | filesystem | btrfs | | passthrough | false | | pool_id | lv_data_pool | | size | 29GB | | available | 29GB | | containers | [] | +-------------+--------------+","title":"Create Quota Group with storage for secure build server"},{"location":"securebuild-lab/create-server/#create-securebuild-server","text":"hpvs vs create --name sbserver- ${ HPVS_NUMBER } --repo SecureDockerBuild \\ --tag 1 .2.1-release-9b63b43 --cpu 2 --ram 2048 \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = new, mount = /newroot, filesystem = ext4, size = 10GB}\" \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = data, mount = /data, filesystem = ext4, size = 2GB}\" \\ --quotagroup \"{quotagroup = sb-user ${ HPVS_NUMBER } , mountid = docker, mount = /docker, filesystem = ext4, size = 16GB}\" \\ --env ={ EX_VOLUMES = \"/docker,/data\" ,ROOTFS_LOCK = y,CLIENT_CRT = $cert } \\ --ports \"{containerport = 443, protocol = tcp, hostport = 213 ${ HPVS_NUMBER } }\" Example Output \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 PROPERTIES \u2502 VALUES \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Name \u2502 sbserver-00 \u2502 \u2502 Status \u2502 Up Less than a second \u2502 \u2502 CPU \u2502 2 \u2502 \u2502 Memory \u2502 2048 \u2502 \u2502 Networks \u2502 Network:bridge \u2502 \u2502 \u2502 IPAddress:172.31.0.7 \u2502 \u2502 \u2502 Gateway:172.31.0.1 \u2502 \u2502 \u2502 Subnet:16 \u2502 \u2502 \u2502 MacAddress:02:42:ac:1f:00:07 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Ports \u2502 LocalPort:443/tcp \u2502 \u2502 \u2502 GuestPort:21300 \u2502 \u2502 \u2502 \u2502 \u2502 Quotagroups \u2502 appliance_data \u2502 \u2502 \u2502 sb-user00 \u2502 \u2502 \u2502 \u2502 \u2502 State \u2502 running \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f We can see the quotagroup is now being used with hpvs quotagroup show --name \"sb-user ${ HPVS_NUMBER } \" Example Output +-------------+--------------------------------+ | PROPERTIES | VALUES | +-------------+--------------------------------+ | name | sb-user00 | | filesystem | btrfs | | passthrough | false | | pool_id | lv_data_pool | | size | 29GB | | available | 701MB | | containers | Mountids: \"new\" , \"data\" , \"docker\" | | | | | | Container:sbserver-00 | | | | +-------------+--------------------------------+ The show output for the Hyper Protect Virtual Server was shown when it was deployed but when can bring it back up with hpvs vs show --name \"sbserver- ${ HPVS_NUMBER } \" Example Output \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 PROPERTIES \u2502 VALUES \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Name \u2502 sbserver-00 \u2502 \u2502 Status \u2502 Up 3 minutes \u2502 \u2502 CPU \u2502 2 \u2502 \u2502 Memory \u2502 2048 \u2502 \u2502 Networks \u2502 Network:bridge \u2502 \u2502 \u2502 IPAddress:172.31.0.7 \u2502 \u2502 \u2502 Gateway:172.31.0.1 \u2502 \u2502 \u2502 Subnet:16 \u2502 \u2502 \u2502 MacAddress:02:42:ac:1f:00:07 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Ports \u2502 LocalPort:443/tcp \u2502 \u2502 \u2502 GuestPort:21300 \u2502 \u2502 \u2502 \u2502 \u2502 Quotagroups \u2502 appliance_data \u2502 \u2502 \u2502 sb-user00 \u2502 \u2502 \u2502 \u2502 \u2502 State \u2502 running \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Your secure build server is now up and running! It is available at the IP Address of the Hyper Protect Virtual Server LPAR and port (GuestPort) specified (In this case https://192.168.22.79:21300 ) You will use this secure build server to securely build your application in the next section. Note You can assign IP addresses and hostnames for containers as necessary for your purposes but using the docker network and host ports is a nice way to quickly get running without having to use up IP addresses on your network.","title":"Create Securebuild server"},{"location":"securebuild-lab/deploy-app/","text":"Deploy your Securely built application into a Hyper Protect Virtual Server \u00b6 Export Variables set in previous sections to current terminal session \u00b6 Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\" Set up you Docker Image Repository \u00b6 Register your repository hpvs repository register --pgp = \" ${ SB_DIR } . ${ REPO_ID } .enc\" --id = \" ${ REPO_ID } \" View your newly registered repository hpvs repository list | grep \" ${ REGISTRY_NAME } - ${ HPVS_NUMBER } \" Set up your quota group for storage \u00b6 Create Quota Group hpvs quotagroup create --name = \" ${ REPO_ID } \" --size = 5GB View your newly created quotagroup hpvs quotagroup list | grep \" ${ REPO_ID } \" Deploy your Application \u00b6 Set App port export APP_PORT = 214 ${ HPVS_NUMBER } Create your Hyper Protect Virtual Server hpvs vs create --name = ${ REPO_ID } --repo ${ REPO_ID } \\ --tag latest --cpu 2 --ram 2048 \\ --quotagroup \"{quotagroup = ${ REPO_ID } , mountid = new, mount = /newroot, filesystem = btrfs, size = 4GB}\" \\ --ports \"{containerport = 443, protocol = tcp, hostport = ${ APP_PORT } }\" Access your application \u00b6 Run the following command to print the address for your application: echo \"https:// ${ SB_IP } : ${ APP_PORT } \" Example Output Your app is now up and running! In the final part of this lab you will use your newly built secure application...","title":"Deploy your Application in HPVS"},{"location":"securebuild-lab/deploy-app/#deploy-your-securely-built-application-into-a-hyper-protect-virtual-server","text":"","title":"Deploy your Securely built application into a Hyper Protect Virtual Server"},{"location":"securebuild-lab/deploy-app/#export-variables-set-in-previous-sections-to-current-terminal-session","text":"Source bashrc to set necessary variables if unset source \" ${ HOME } /.bashrc\"","title":"Export Variables set in previous sections to current terminal session"},{"location":"securebuild-lab/deploy-app/#set-up-you-docker-image-repository","text":"Register your repository hpvs repository register --pgp = \" ${ SB_DIR } . ${ REPO_ID } .enc\" --id = \" ${ REPO_ID } \" View your newly registered repository hpvs repository list | grep \" ${ REGISTRY_NAME } - ${ HPVS_NUMBER } \"","title":"Set up you Docker Image Repository"},{"location":"securebuild-lab/deploy-app/#set-up-your-quota-group-for-storage","text":"Create Quota Group hpvs quotagroup create --name = \" ${ REPO_ID } \" --size = 5GB View your newly created quotagroup hpvs quotagroup list | grep \" ${ REPO_ID } \"","title":"Set up your quota group for storage"},{"location":"securebuild-lab/deploy-app/#deploy-your-application","text":"Set App port export APP_PORT = 214 ${ HPVS_NUMBER } Create your Hyper Protect Virtual Server hpvs vs create --name = ${ REPO_ID } --repo ${ REPO_ID } \\ --tag latest --cpu 2 --ram 2048 \\ --quotagroup \"{quotagroup = ${ REPO_ID } , mountid = new, mount = /newroot, filesystem = btrfs, size = 4GB}\" \\ --ports \"{containerport = 443, protocol = tcp, hostport = ${ APP_PORT } }\"","title":"Deploy your Application"},{"location":"securebuild-lab/deploy-app/#access-your-application","text":"Run the following command to print the address for your application: echo \"https:// ${ SB_IP } : ${ APP_PORT } \" Example Output Your app is now up and running! In the final part of this lab you will use your newly built secure application...","title":"Access your application"},{"location":"securebuild-lab/overview/","text":"","title":"Process Overview"},{"location":"securebuild-lab/securebuild-setup/","text":"Secure Build Setup \u00b6 Add Docker registry to use for secure build \u00b6 See your current docker registries with: hpvs registry list Example Output +---------------+ | REGISTRY NAME | +---------------+ +---------------+ Set your Docker username to the username for your account on Docker Hub Command Syntax export DOCKER_USERNAME = \"my_username\" Example Command export DOCKER_USERNAME = \"gmoney23\" Note This will be the username you used when you created your Docker Hub account in the Prerequisites Set your Docker registry placeholder name Command Syntax export REGISTRY_NAME = \"my_registry\" Example Command export REGISTRY_NAME = \"g_docker_hub\" Save your REGISTRY_NAME to bashrc for future shells (in case you open new terminals) echo \"export REGISTRY_NAME=' ${ REGISTRY_NAME } '\" >> \" ${ HOME } /.bashrc\" Add your Docker registry with: hpvs registry add --name \" ${ REGISTRY_NAME } \" --dct https://notary.docker.io --url docker.io --user \" ${ DOCKER_USERNAME } \" Note It will prompt you to enter your password. Use the Docker Hub token you have created for the lab in the Prerequisites Example Output Enter Password: List your registered Docker registries again to confirm your registry has been added. hpvs registry list Example Output +---------------+ | REGISTRY NAME | +---------------+ | g_docker_hub | +---------------+ Check the details of your added registry with hpvs registry show --name \" ${ REGISTRY_NAME } \" Example Output +------+--------------------------+ | name | g_docker_hub | | user | gmoney23 | | dct | https://notary.docker.io | | url | docker.io | +------+--------------------------+","title":"Configuring your Environment"},{"location":"securebuild-lab/securebuild-setup/#secure-build-setup","text":"","title":"Secure Build Setup"},{"location":"securebuild-lab/securebuild-setup/#add-docker-registry-to-use-for-secure-build","text":"See your current docker registries with: hpvs registry list Example Output +---------------+ | REGISTRY NAME | +---------------+ +---------------+ Set your Docker username to the username for your account on Docker Hub Command Syntax export DOCKER_USERNAME = \"my_username\" Example Command export DOCKER_USERNAME = \"gmoney23\" Note This will be the username you used when you created your Docker Hub account in the Prerequisites Set your Docker registry placeholder name Command Syntax export REGISTRY_NAME = \"my_registry\" Example Command export REGISTRY_NAME = \"g_docker_hub\" Save your REGISTRY_NAME to bashrc for future shells (in case you open new terminals) echo \"export REGISTRY_NAME=' ${ REGISTRY_NAME } '\" >> \" ${ HOME } /.bashrc\" Add your Docker registry with: hpvs registry add --name \" ${ REGISTRY_NAME } \" --dct https://notary.docker.io --url docker.io --user \" ${ DOCKER_USERNAME } \" Note It will prompt you to enter your password. Use the Docker Hub token you have created for the lab in the Prerequisites Example Output Enter Password: List your registered Docker registries again to confirm your registry has been added. hpvs registry list Example Output +---------------+ | REGISTRY NAME | +---------------+ | g_docker_hub | +---------------+ Check the details of your added registry with hpvs registry show --name \" ${ REGISTRY_NAME } \" Example Output +------+--------------------------+ | name | g_docker_hub | | user | gmoney23 | | dct | https://notary.docker.io | | url | docker.io | +------+--------------------------+","title":"Add Docker registry to use for secure build"}]}